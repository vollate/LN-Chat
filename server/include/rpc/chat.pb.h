// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_chat_2eproto;
namespace LN_Chat {
class GetRoomPeersReply;
struct GetRoomPeersReplyDefaultTypeInternal;
extern GetRoomPeersReplyDefaultTypeInternal _GetRoomPeersReply_default_instance_;
class GetRoomPeersRequest;
struct GetRoomPeersRequestDefaultTypeInternal;
extern GetRoomPeersRequestDefaultTypeInternal _GetRoomPeersRequest_default_instance_;
class HeartBeatReply;
struct HeartBeatReplyDefaultTypeInternal;
extern HeartBeatReplyDefaultTypeInternal _HeartBeatReply_default_instance_;
class HeartBeatRequest;
struct HeartBeatRequestDefaultTypeInternal;
extern HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
class PublishRoomReply;
struct PublishRoomReplyDefaultTypeInternal;
extern PublishRoomReplyDefaultTypeInternal _PublishRoomReply_default_instance_;
class PublishRoomRequest;
struct PublishRoomRequestDefaultTypeInternal;
extern PublishRoomRequestDefaultTypeInternal _PublishRoomRequest_default_instance_;
}  // namespace LN_Chat
PROTOBUF_NAMESPACE_OPEN
template<> ::LN_Chat::GetRoomPeersReply* Arena::CreateMaybeMessage<::LN_Chat::GetRoomPeersReply>(Arena*);
template<> ::LN_Chat::GetRoomPeersRequest* Arena::CreateMaybeMessage<::LN_Chat::GetRoomPeersRequest>(Arena*);
template<> ::LN_Chat::HeartBeatReply* Arena::CreateMaybeMessage<::LN_Chat::HeartBeatReply>(Arena*);
template<> ::LN_Chat::HeartBeatRequest* Arena::CreateMaybeMessage<::LN_Chat::HeartBeatRequest>(Arena*);
template<> ::LN_Chat::PublishRoomReply* Arena::CreateMaybeMessage<::LN_Chat::PublishRoomReply>(Arena*);
template<> ::LN_Chat::PublishRoomRequest* Arena::CreateMaybeMessage<::LN_Chat::PublishRoomRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LN_Chat {

// ===================================================================

class PublishRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LN_Chat.PublishRoomRequest) */ {
 public:
  inline PublishRoomRequest() : PublishRoomRequest(nullptr) {}
  ~PublishRoomRequest() override;
  explicit PROTOBUF_CONSTEXPR PublishRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRoomRequest(const PublishRoomRequest& from);
  PublishRoomRequest(PublishRoomRequest&& from) noexcept
    : PublishRoomRequest() {
    *this = ::std::move(from);
  }

  inline PublishRoomRequest& operator=(const PublishRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRoomRequest& operator=(PublishRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRoomRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRoomRequest*>(
               &_PublishRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PublishRoomRequest& a, PublishRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishRoomRequest& from) {
    PublishRoomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LN_Chat.PublishRoomRequest";
  }
  protected:
  explicit PublishRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:LN_Chat.PublishRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class PublishRoomReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LN_Chat.PublishRoomReply) */ {
 public:
  inline PublishRoomReply() : PublishRoomReply(nullptr) {}
  ~PublishRoomReply() override;
  explicit PROTOBUF_CONSTEXPR PublishRoomReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishRoomReply(const PublishRoomReply& from);
  PublishRoomReply(PublishRoomReply&& from) noexcept
    : PublishRoomReply() {
    *this = ::std::move(from);
  }

  inline PublishRoomReply& operator=(const PublishRoomReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishRoomReply& operator=(PublishRoomReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishRoomReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishRoomReply* internal_default_instance() {
    return reinterpret_cast<const PublishRoomReply*>(
               &_PublishRoomReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PublishRoomReply& a, PublishRoomReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishRoomReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishRoomReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishRoomReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishRoomReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishRoomReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublishRoomReply& from) {
    PublishRoomReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishRoomReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LN_Chat.PublishRoomReply";
  }
  protected:
  explicit PublishRoomReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LN_Chat.PublishRoomReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class GetRoomPeersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LN_Chat.GetRoomPeersRequest) */ {
 public:
  inline GetRoomPeersRequest() : GetRoomPeersRequest(nullptr) {}
  ~GetRoomPeersRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRoomPeersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRoomPeersRequest(const GetRoomPeersRequest& from);
  GetRoomPeersRequest(GetRoomPeersRequest&& from) noexcept
    : GetRoomPeersRequest() {
    *this = ::std::move(from);
  }

  inline GetRoomPeersRequest& operator=(const GetRoomPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomPeersRequest& operator=(GetRoomPeersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomPeersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomPeersRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoomPeersRequest*>(
               &_GetRoomPeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRoomPeersRequest& a, GetRoomPeersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoomPeersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomPeersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomPeersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoomPeersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRoomPeersRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRoomPeersRequest& from) {
    GetRoomPeersRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoomPeersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LN_Chat.GetRoomPeersRequest";
  }
  protected:
  explicit GetRoomPeersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kClientIdFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint64 clientId = 3;
  void clear_clientid();
  uint64_t clientid() const;
  void set_clientid(uint64_t value);
  private:
  uint64_t _internal_clientid() const;
  void _internal_set_clientid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:LN_Chat.GetRoomPeersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    uint64_t clientid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class GetRoomPeersReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LN_Chat.GetRoomPeersReply) */ {
 public:
  inline GetRoomPeersReply() : GetRoomPeersReply(nullptr) {}
  ~GetRoomPeersReply() override;
  explicit PROTOBUF_CONSTEXPR GetRoomPeersReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRoomPeersReply(const GetRoomPeersReply& from);
  GetRoomPeersReply(GetRoomPeersReply&& from) noexcept
    : GetRoomPeersReply() {
    *this = ::std::move(from);
  }

  inline GetRoomPeersReply& operator=(const GetRoomPeersReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoomPeersReply& operator=(GetRoomPeersReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRoomPeersReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRoomPeersReply* internal_default_instance() {
    return reinterpret_cast<const GetRoomPeersReply*>(
               &_GetRoomPeersReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetRoomPeersReply& a, GetRoomPeersReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoomPeersReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoomPeersReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRoomPeersReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRoomPeersReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRoomPeersReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRoomPeersReply& from) {
    GetRoomPeersReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoomPeersReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LN_Chat.GetRoomPeersReply";
  }
  protected:
  explicit GetRoomPeersReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 2,
    kMessageFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // repeated string peers = 2;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  const std::string& peers(int index) const;
  std::string* mutable_peers(int index);
  void set_peers(int index, const std::string& value);
  void set_peers(int index, std::string&& value);
  void set_peers(int index, const char* value);
  void set_peers(int index, const char* value, size_t size);
  std::string* add_peers();
  void add_peers(const std::string& value);
  void add_peers(std::string&& value);
  void add_peers(const char* value);
  void add_peers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& peers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_peers();
  private:
  const std::string& _internal_peers(int index) const;
  std::string* _internal_add_peers();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LN_Chat.GetRoomPeersReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> peers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LN_Chat.HeartBeatRequest) */ {
 public:
  inline HeartBeatRequest() : HeartBeatRequest(nullptr) {}
  ~HeartBeatRequest() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatRequest(const HeartBeatRequest& from);
  HeartBeatRequest(HeartBeatRequest&& from) noexcept
    : HeartBeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatRequest& operator=(HeartBeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRequest*>(
               &_HeartBeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HeartBeatRequest& a, HeartBeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatRequest& from) {
    HeartBeatRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LN_Chat.HeartBeatRequest";
  }
  protected:
  explicit HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // uint64 clientId = 1;
  void clear_clientid();
  uint64_t clientid() const;
  void set_clientid(uint64_t value);
  private:
  uint64_t _internal_clientid() const;
  void _internal_set_clientid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:LN_Chat.HeartBeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t clientid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LN_Chat.HeartBeatReply) */ {
 public:
  inline HeartBeatReply() : HeartBeatReply(nullptr) {}
  ~HeartBeatReply() override;
  explicit PROTOBUF_CONSTEXPR HeartBeatReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatReply(const HeartBeatReply& from);
  HeartBeatReply(HeartBeatReply&& from) noexcept
    : HeartBeatReply() {
    *this = ::std::move(from);
  }

  inline HeartBeatReply& operator=(const HeartBeatReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatReply& operator=(HeartBeatReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatReply* internal_default_instance() {
    return reinterpret_cast<const HeartBeatReply*>(
               &_HeartBeatReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HeartBeatReply& a, HeartBeatReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeartBeatReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeartBeatReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeartBeatReply& from) {
    HeartBeatReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LN_Chat.HeartBeatReply";
  }
  protected:
  explicit HeartBeatReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:LN_Chat.HeartBeatReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PublishRoomRequest

// string name = 1;
inline void PublishRoomRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PublishRoomRequest::name() const {
  // @@protoc_insertion_point(field_get:LN_Chat.PublishRoomRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishRoomRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LN_Chat.PublishRoomRequest.name)
}
inline std::string* PublishRoomRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:LN_Chat.PublishRoomRequest.name)
  return _s;
}
inline const std::string& PublishRoomRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void PublishRoomRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishRoomRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishRoomRequest::release_name() {
  // @@protoc_insertion_point(field_release:LN_Chat.PublishRoomRequest.name)
  return _impl_.name_.Release();
}
inline void PublishRoomRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LN_Chat.PublishRoomRequest.name)
}

// string password = 2;
inline void PublishRoomRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& PublishRoomRequest::password() const {
  // @@protoc_insertion_point(field_get:LN_Chat.PublishRoomRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishRoomRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LN_Chat.PublishRoomRequest.password)
}
inline std::string* PublishRoomRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:LN_Chat.PublishRoomRequest.password)
  return _s;
}
inline const std::string& PublishRoomRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void PublishRoomRequest::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishRoomRequest::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishRoomRequest::release_password() {
  // @@protoc_insertion_point(field_release:LN_Chat.PublishRoomRequest.password)
  return _impl_.password_.Release();
}
inline void PublishRoomRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LN_Chat.PublishRoomRequest.password)
}

// -------------------------------------------------------------------

// PublishRoomReply

// bool success = 1;
inline void PublishRoomReply::clear_success() {
  _impl_.success_ = false;
}
inline bool PublishRoomReply::_internal_success() const {
  return _impl_.success_;
}
inline bool PublishRoomReply::success() const {
  // @@protoc_insertion_point(field_get:LN_Chat.PublishRoomReply.success)
  return _internal_success();
}
inline void PublishRoomReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void PublishRoomReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:LN_Chat.PublishRoomReply.success)
}

// string message = 2;
inline void PublishRoomReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& PublishRoomReply::message() const {
  // @@protoc_insertion_point(field_get:LN_Chat.PublishRoomReply.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishRoomReply::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LN_Chat.PublishRoomReply.message)
}
inline std::string* PublishRoomReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:LN_Chat.PublishRoomReply.message)
  return _s;
}
inline const std::string& PublishRoomReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void PublishRoomReply::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* PublishRoomReply::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* PublishRoomReply::release_message() {
  // @@protoc_insertion_point(field_release:LN_Chat.PublishRoomReply.message)
  return _impl_.message_.Release();
}
inline void PublishRoomReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LN_Chat.PublishRoomReply.message)
}

// -------------------------------------------------------------------

// GetRoomPeersRequest

// string name = 1;
inline void GetRoomPeersRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetRoomPeersRequest::name() const {
  // @@protoc_insertion_point(field_get:LN_Chat.GetRoomPeersRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRoomPeersRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LN_Chat.GetRoomPeersRequest.name)
}
inline std::string* GetRoomPeersRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:LN_Chat.GetRoomPeersRequest.name)
  return _s;
}
inline const std::string& GetRoomPeersRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetRoomPeersRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRoomPeersRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRoomPeersRequest::release_name() {
  // @@protoc_insertion_point(field_release:LN_Chat.GetRoomPeersRequest.name)
  return _impl_.name_.Release();
}
inline void GetRoomPeersRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LN_Chat.GetRoomPeersRequest.name)
}

// string password = 2;
inline void GetRoomPeersRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& GetRoomPeersRequest::password() const {
  // @@protoc_insertion_point(field_get:LN_Chat.GetRoomPeersRequest.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRoomPeersRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LN_Chat.GetRoomPeersRequest.password)
}
inline std::string* GetRoomPeersRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:LN_Chat.GetRoomPeersRequest.password)
  return _s;
}
inline const std::string& GetRoomPeersRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void GetRoomPeersRequest::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRoomPeersRequest::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRoomPeersRequest::release_password() {
  // @@protoc_insertion_point(field_release:LN_Chat.GetRoomPeersRequest.password)
  return _impl_.password_.Release();
}
inline void GetRoomPeersRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LN_Chat.GetRoomPeersRequest.password)
}

// uint64 clientId = 3;
inline void GetRoomPeersRequest::clear_clientid() {
  _impl_.clientid_ = uint64_t{0u};
}
inline uint64_t GetRoomPeersRequest::_internal_clientid() const {
  return _impl_.clientid_;
}
inline uint64_t GetRoomPeersRequest::clientid() const {
  // @@protoc_insertion_point(field_get:LN_Chat.GetRoomPeersRequest.clientId)
  return _internal_clientid();
}
inline void GetRoomPeersRequest::_internal_set_clientid(uint64_t value) {
  
  _impl_.clientid_ = value;
}
inline void GetRoomPeersRequest::set_clientid(uint64_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:LN_Chat.GetRoomPeersRequest.clientId)
}

// -------------------------------------------------------------------

// GetRoomPeersReply

// bool success = 1;
inline void GetRoomPeersReply::clear_success() {
  _impl_.success_ = false;
}
inline bool GetRoomPeersReply::_internal_success() const {
  return _impl_.success_;
}
inline bool GetRoomPeersReply::success() const {
  // @@protoc_insertion_point(field_get:LN_Chat.GetRoomPeersReply.success)
  return _internal_success();
}
inline void GetRoomPeersReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GetRoomPeersReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:LN_Chat.GetRoomPeersReply.success)
}

// repeated string peers = 2;
inline int GetRoomPeersReply::_internal_peers_size() const {
  return _impl_.peers_.size();
}
inline int GetRoomPeersReply::peers_size() const {
  return _internal_peers_size();
}
inline void GetRoomPeersReply::clear_peers() {
  _impl_.peers_.Clear();
}
inline std::string* GetRoomPeersReply::add_peers() {
  std::string* _s = _internal_add_peers();
  // @@protoc_insertion_point(field_add_mutable:LN_Chat.GetRoomPeersReply.peers)
  return _s;
}
inline const std::string& GetRoomPeersReply::_internal_peers(int index) const {
  return _impl_.peers_.Get(index);
}
inline const std::string& GetRoomPeersReply::peers(int index) const {
  // @@protoc_insertion_point(field_get:LN_Chat.GetRoomPeersReply.peers)
  return _internal_peers(index);
}
inline std::string* GetRoomPeersReply::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:LN_Chat.GetRoomPeersReply.peers)
  return _impl_.peers_.Mutable(index);
}
inline void GetRoomPeersReply::set_peers(int index, const std::string& value) {
  _impl_.peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:LN_Chat.GetRoomPeersReply.peers)
}
inline void GetRoomPeersReply::set_peers(int index, std::string&& value) {
  _impl_.peers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:LN_Chat.GetRoomPeersReply.peers)
}
inline void GetRoomPeersReply::set_peers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.peers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LN_Chat.GetRoomPeersReply.peers)
}
inline void GetRoomPeersReply::set_peers(int index, const char* value, size_t size) {
  _impl_.peers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LN_Chat.GetRoomPeersReply.peers)
}
inline std::string* GetRoomPeersReply::_internal_add_peers() {
  return _impl_.peers_.Add();
}
inline void GetRoomPeersReply::add_peers(const std::string& value) {
  _impl_.peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LN_Chat.GetRoomPeersReply.peers)
}
inline void GetRoomPeersReply::add_peers(std::string&& value) {
  _impl_.peers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LN_Chat.GetRoomPeersReply.peers)
}
inline void GetRoomPeersReply::add_peers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.peers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LN_Chat.GetRoomPeersReply.peers)
}
inline void GetRoomPeersReply::add_peers(const char* value, size_t size) {
  _impl_.peers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LN_Chat.GetRoomPeersReply.peers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetRoomPeersReply::peers() const {
  // @@protoc_insertion_point(field_list:LN_Chat.GetRoomPeersReply.peers)
  return _impl_.peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetRoomPeersReply::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:LN_Chat.GetRoomPeersReply.peers)
  return &_impl_.peers_;
}

// string message = 3;
inline void GetRoomPeersReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& GetRoomPeersReply::message() const {
  // @@protoc_insertion_point(field_get:LN_Chat.GetRoomPeersReply.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRoomPeersReply::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:LN_Chat.GetRoomPeersReply.message)
}
inline std::string* GetRoomPeersReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:LN_Chat.GetRoomPeersReply.message)
  return _s;
}
inline const std::string& GetRoomPeersReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void GetRoomPeersReply::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRoomPeersReply::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRoomPeersReply::release_message() {
  // @@protoc_insertion_point(field_release:LN_Chat.GetRoomPeersReply.message)
  return _impl_.message_.Release();
}
inline void GetRoomPeersReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:LN_Chat.GetRoomPeersReply.message)
}

// -------------------------------------------------------------------

// HeartBeatRequest

// uint64 clientId = 1;
inline void HeartBeatRequest::clear_clientid() {
  _impl_.clientid_ = uint64_t{0u};
}
inline uint64_t HeartBeatRequest::_internal_clientid() const {
  return _impl_.clientid_;
}
inline uint64_t HeartBeatRequest::clientid() const {
  // @@protoc_insertion_point(field_get:LN_Chat.HeartBeatRequest.clientId)
  return _internal_clientid();
}
inline void HeartBeatRequest::_internal_set_clientid(uint64_t value) {
  
  _impl_.clientid_ = value;
}
inline void HeartBeatRequest::set_clientid(uint64_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:LN_Chat.HeartBeatRequest.clientId)
}

// -------------------------------------------------------------------

// HeartBeatReply

// bool success = 1;
inline void HeartBeatReply::clear_success() {
  _impl_.success_ = false;
}
inline bool HeartBeatReply::_internal_success() const {
  return _impl_.success_;
}
inline bool HeartBeatReply::success() const {
  // @@protoc_insertion_point(field_get:LN_Chat.HeartBeatReply.success)
  return _internal_success();
}
inline void HeartBeatReply::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void HeartBeatReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:LN_Chat.HeartBeatReply.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LN_Chat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chat_2eproto
