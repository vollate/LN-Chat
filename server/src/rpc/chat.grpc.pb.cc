// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chat.proto

#include "chat.pb.h"
#include "chat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace LN_Chat {

static const char* ChatService_method_names[] = {
  "/LN_Chat.ChatService/HeartBeat",
  "/LN_Chat.ChatService/PublishRoom",
  "/LN_Chat.ChatService/GetRoomPeers",
  "/LN_Chat.ChatService/RegisterClient",
};

std::unique_ptr< ChatService::Stub> ChatService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatService::Stub> stub(new ChatService::Stub(channel, options));
  return stub;
}

ChatService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HeartBeat_(ChatService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PublishRoom_(ChatService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoomPeers_(ChatService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterClient_(ChatService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatService::Stub::HeartBeat(::grpc::ClientContext* context, const ::LN_Chat::HeartBeatRequest& request, ::LN_Chat::HeartBeatReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LN_Chat::HeartBeatRequest, ::LN_Chat::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HeartBeat_, context, request, response);
}

void ChatService::Stub::async::HeartBeat(::grpc::ClientContext* context, const ::LN_Chat::HeartBeatRequest* request, ::LN_Chat::HeartBeatReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LN_Chat::HeartBeatRequest, ::LN_Chat::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeartBeat_, context, request, response, std::move(f));
}

void ChatService::Stub::async::HeartBeat(::grpc::ClientContext* context, const ::LN_Chat::HeartBeatRequest* request, ::LN_Chat::HeartBeatReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HeartBeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::HeartBeatReply>* ChatService::Stub::PrepareAsyncHeartBeatRaw(::grpc::ClientContext* context, const ::LN_Chat::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::LN_Chat::HeartBeatReply, ::LN_Chat::HeartBeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HeartBeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::HeartBeatReply>* ChatService::Stub::AsyncHeartBeatRaw(::grpc::ClientContext* context, const ::LN_Chat::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHeartBeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::PublishRoom(::grpc::ClientContext* context, const ::LN_Chat::PublishRoomRequest& request, ::LN_Chat::PublishRoomReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LN_Chat::PublishRoomRequest, ::LN_Chat::PublishRoomReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PublishRoom_, context, request, response);
}

void ChatService::Stub::async::PublishRoom(::grpc::ClientContext* context, const ::LN_Chat::PublishRoomRequest* request, ::LN_Chat::PublishRoomReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LN_Chat::PublishRoomRequest, ::LN_Chat::PublishRoomReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishRoom_, context, request, response, std::move(f));
}

void ChatService::Stub::async::PublishRoom(::grpc::ClientContext* context, const ::LN_Chat::PublishRoomRequest* request, ::LN_Chat::PublishRoomReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PublishRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::PublishRoomReply>* ChatService::Stub::PrepareAsyncPublishRoomRaw(::grpc::ClientContext* context, const ::LN_Chat::PublishRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::LN_Chat::PublishRoomReply, ::LN_Chat::PublishRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PublishRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::PublishRoomReply>* ChatService::Stub::AsyncPublishRoomRaw(::grpc::ClientContext* context, const ::LN_Chat::PublishRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPublishRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::GetRoomPeers(::grpc::ClientContext* context, const ::LN_Chat::GetRoomPeersRequest& request, ::LN_Chat::GetRoomPeersReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LN_Chat::GetRoomPeersRequest, ::LN_Chat::GetRoomPeersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoomPeers_, context, request, response);
}

void ChatService::Stub::async::GetRoomPeers(::grpc::ClientContext* context, const ::LN_Chat::GetRoomPeersRequest* request, ::LN_Chat::GetRoomPeersReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LN_Chat::GetRoomPeersRequest, ::LN_Chat::GetRoomPeersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomPeers_, context, request, response, std::move(f));
}

void ChatService::Stub::async::GetRoomPeers(::grpc::ClientContext* context, const ::LN_Chat::GetRoomPeersRequest* request, ::LN_Chat::GetRoomPeersReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomPeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::GetRoomPeersReply>* ChatService::Stub::PrepareAsyncGetRoomPeersRaw(::grpc::ClientContext* context, const ::LN_Chat::GetRoomPeersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::LN_Chat::GetRoomPeersReply, ::LN_Chat::GetRoomPeersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoomPeers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::GetRoomPeersReply>* ChatService::Stub::AsyncGetRoomPeersRaw(::grpc::ClientContext* context, const ::LN_Chat::GetRoomPeersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoomPeersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChatService::Stub::RegisterClient(::grpc::ClientContext* context, const ::LN_Chat::RegisterClientRequest& request, ::LN_Chat::RegisterClientReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::LN_Chat::RegisterClientRequest, ::LN_Chat::RegisterClientReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterClient_, context, request, response);
}

void ChatService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::LN_Chat::RegisterClientRequest* request, ::LN_Chat::RegisterClientReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::LN_Chat::RegisterClientRequest, ::LN_Chat::RegisterClientReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, std::move(f));
}

void ChatService::Stub::async::RegisterClient(::grpc::ClientContext* context, const ::LN_Chat::RegisterClientRequest* request, ::LN_Chat::RegisterClientReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::RegisterClientReply>* ChatService::Stub::PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::LN_Chat::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::LN_Chat::RegisterClientReply, ::LN_Chat::RegisterClientRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::LN_Chat::RegisterClientReply>* ChatService::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::LN_Chat::RegisterClientRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChatService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::LN_Chat::HeartBeatRequest, ::LN_Chat::HeartBeatReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LN_Chat::HeartBeatRequest* req,
             ::LN_Chat::HeartBeatReply* resp) {
               return service->HeartBeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::LN_Chat::PublishRoomRequest, ::LN_Chat::PublishRoomReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LN_Chat::PublishRoomRequest* req,
             ::LN_Chat::PublishRoomReply* resp) {
               return service->PublishRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::LN_Chat::GetRoomPeersRequest, ::LN_Chat::GetRoomPeersReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LN_Chat::GetRoomPeersRequest* req,
             ::LN_Chat::GetRoomPeersReply* resp) {
               return service->GetRoomPeers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatService::Service, ::LN_Chat::RegisterClientRequest, ::LN_Chat::RegisterClientReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChatService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::LN_Chat::RegisterClientRequest* req,
             ::LN_Chat::RegisterClientReply* resp) {
               return service->RegisterClient(ctx, req, resp);
             }, this)));
}

ChatService::Service::~Service() {
}

::grpc::Status ChatService::Service::HeartBeat(::grpc::ServerContext* context, const ::LN_Chat::HeartBeatRequest* request, ::LN_Chat::HeartBeatReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::PublishRoom(::grpc::ServerContext* context, const ::LN_Chat::PublishRoomRequest* request, ::LN_Chat::PublishRoomReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::GetRoomPeers(::grpc::ServerContext* context, const ::LN_Chat::GetRoomPeersRequest* request, ::LN_Chat::GetRoomPeersReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatService::Service::RegisterClient(::grpc::ServerContext* context, const ::LN_Chat::RegisterClientRequest* request, ::LN_Chat::RegisterClientReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace LN_Chat

